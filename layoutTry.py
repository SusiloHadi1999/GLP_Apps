# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'layoutTry.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

#Importing Libraries
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Qt5Agg')
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as Navi
from matplotlib.figure import Figure
import sys
import os
import numpy as np
import math
import pandas as pd
import sip

#Main Window
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(850, 600)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(0, 80, 851, 41))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(619, 0, 41, 561))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 20, 621, 51))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(650, 10, 71, 81))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("Undip.png"))
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(730, 5, 121, 31))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(730, 30, 121, 31))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(730, 40, 121, 31))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(730, 60, 121, 41))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(650, 110, 191, 21))
        self.label_7.setObjectName("label_7")
        self.OpenFileButton = QtWidgets.QPushButton(self.centralwidget)
        self.OpenFileButton.setGeometry(QtCore.QRect(700, 140, 91, 23))
        self.OpenFileButton.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.OpenFileButton.setObjectName("OpenFileButton")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(640, 170, 211, 20))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(650, 190, 191, 21))
        self.label_8.setObjectName("label_8")
        self.PlotDataButton = QtWidgets.QPushButton(self.centralwidget)
        self.PlotDataButton.setGeometry(QtCore.QRect(700, 270, 91, 23))
        self.PlotDataButton.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.PlotDataButton.setObjectName("PlotDataButton")
        self.textEdit_K = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_K.setGeometry(QtCore.QRect(710, 220, 101, 31))
        self.textEdit_K.setObjectName("textEdit_K")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(650, 220, 51, 31))
        self.label_9.setObjectName("label_9")
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setGeometry(QtCore.QRect(640, 300, 211, 20))
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(650, 320, 191, 21))
        self.label_10.setObjectName("label_10")
        self.textEdit_t = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_t.setGeometry(QtCore.QRect(710, 350, 101, 31))
        self.textEdit_t.setObjectName("textEdit_t")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(650, 350, 51, 31))
        self.label_11.setObjectName("label_11")
        self.line_5 = QtWidgets.QFrame(self.centralwidget)
        self.line_5.setGeometry(QtCore.QRect(640, 400, 211, 20))
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.ClearButton = QtWidgets.QPushButton(self.centralwidget)
        self.ClearButton.setGeometry(QtCore.QRect(660, 520, 71, 23))
        self.ClearButton.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.ClearButton.setObjectName("ClearButton")
        self.ExportButton = QtWidgets.QPushButton(self.centralwidget)
        self.ExportButton.setGeometry(QtCore.QRect(760, 520, 71, 23))
        self.ExportButton.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.ExportButton.setObjectName("ExportButton")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 100, 621, 451))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(650, 450, 51, 31))
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(650, 420, 191, 21))
        self.label_13.setObjectName("label_13")
        self.textEdit_SD = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_SD.setGeometry(QtCore.QRect(710, 450, 101, 31))
        self.textEdit_SD.setObjectName("textEdit_SD")
        self.line_6 = QtWidgets.QFrame(self.centralwidget)
        self.line_6.setGeometry(QtCore.QRect(640, 490, 211, 20))
        self.line_6.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 850, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionExport = QtWidgets.QAction(MainWindow)
        self.actionExport.setObjectName("actionExport")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.menuFile.addAction(self.actionExport)
        self.menuFile.addAction(self.actionExit)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #set initial condition
        self.Set_InitialCondition()

        #connecting pushbutton
        self.OpenFileButton.clicked.connect(self.getFile)
        self.PlotDataButton.clicked.connect(self.SimulateData)
        self.ClearButton.clicked.connect(self.ClearDatas)
        self.ExportButton.clicked.connect(self.ExportFile)
        
        self.actionExport.triggered.connect(self.ExportFile)
        self.actionExit.triggered.connect(MainWindow.close)

    def Set_InitialCondition(self):
        #set initial data
        self.V_experiment = []
        self.I_experiment = []
        self.V_simulation = []
        self.I_simulation = np.array([])
        self.a = []
        self.b = []
        self.T = []
        self.d = []
        self.K = []
        self.Datas = np.array([])

        #print initial data
        print('V Eksperiment (in kV)= ', self.V_experiment)
        print('I Eksperiment (in ÂµA)= ', self.I_experiment)
        print('K Value = ', self.K)

        #set empty plot
        self.Canvas_Plot = GraphCanvas(self)
        self.toolbar = Navi(self.Canvas_Plot, self.centralwidget)
        self.verticalLayout.addWidget(self.toolbar)
        self.verticalLayout.addWidget(self.Canvas_Plot)
        self.axes =self.Canvas_Plot.axes
        self.Experiment_Graph = self.axes.plot(self.V_experiment, self.I_experiment)
        self.axes.set_xlabel('Voltage (kV)')
        self.axes.set_ylabel('Current (ÂµA)')
        self.axes.set_title('V-I Plot of Corona Discharge GL-P Configuration')
        self.axes.grid(True)

    def getFile(self):
        self.openfilename = QFileDialog.getOpenFileName(filter="xlsx(*xlsx);;xls(*xls);;csv(*csv)")[0]
        self.Datas = pd.read_excel(self.openfilename).fillna(0)
        
        try:
            self.V_experiment = self.Datas['V']
            self.I_experiment = self.Datas['I']
            self.a = self.Datas.loc[0,'a']
            self.b = self.Datas.loc[0,'b']
            self.T = int(self.Datas.loc[0,'Theta'])
            self.d = self.Datas.loc[0,'d']
        except:
            print('Error: Your input file is not valid. Please input file with correct format that is with Row Header Format = (V I a b Tetha and d)')
            self.Error_OpenFile()
            return

        print('Data = \n', self.Datas)
        print('V Experiment (in kV)= \n', self.V_experiment)
        print('I Experiment (in ÂµA)= \n', self.I_experiment)
        
        self.V_datas = len(self.V_experiment)
        self.I_datas = len(self.I_experiment)

        self.plot_Experiment()

    def plot_Experiment(self):
        plt.clf()
        try:
            self.verticalLayout.removeWidget(self.toolbar)
            self.verticalLayout.removeWidget(self.Canvas_Plot)
            sip.delete(self.toolbar)
            sip.delete(self.Canvas_Plot)
            self.toolbar = None
            self.Canvas_Plot = None
        except Exception as e:
            print(e)
            pass

        self.Canvas_Plot = GraphCanvas(self)
        self.toolbar = Navi(self.Canvas_Plot, self.centralwidget)
        self.verticalLayout.addWidget(self.toolbar)
        self.verticalLayout.addWidget(self.Canvas_Plot)

        str_a = str(self.a)
        str_b = str(self.b)
        str_c = str(self.d)
        str_T = str(self.T)
        label_Experiment = 'Eksperiment with a= '+str_a+'m, b= '+str_b+'m, d= '+str_c+'m and angle= '+str_T

        self.Canvas_Plot.axes.cla()
        self.axes = self.Canvas_Plot.axes
        self.axes_Graph = self.axes.scatter(self.V_experiment, self.I_experiment, label=label_Experiment, color='black', s=12)
        self.axes.set_xlabel('Voltage (kV)')
        self.axes.set_ylabel('Current (ÂµA)')
        self.axes.set_title('V-I Plot of Corona Discharge GL-P Configuration')
        self.axes.grid(True)
        self.axes.legend(loc=0, prop={'size': 8})

        self.Canvas_Plot.draw()

    def SimulateData(self):
        #error conditions
        if self.Datas.size == 0:
            print('Input Experiment Data First!')
            self.Error_EmptyData()
            return
        
        #put K Value
        K = (self.textEdit_K.toPlainText())
        if K == '':
            print('Error: Input K is empty!\nPlease, input K Value')
            self.Error_EmptyK()
            return
        try:
            self.K = float(K)
        except:
            print('Error: Input K is not valid!\nPlease, input K Value using number format (use . to make decimal number)') 
            self.Error_InputK()
            return

        print('K Value = ', self.K)

        self.getI_Simulation()
        self.get_ttestValue()
        self.Polinom_Regression()
        self.plot_Simulation()

    def getI_Simulation(self):
        epsilon = 8.854187e-12
        mu = math.pi*4e-7
        dho = 1e-4
        self.V_simulation = self.V_experiment
        self.V_Initial = 0.585 #self.V_experiment[0]

        self.C_Total = epsilon*((self.a*(np.log(self.b+self.d)))+((math.tan(math.pi*self.T/180))*((self.a/(math.tan(math.pi*self.T/180)))+self.d)*(1-(np.log(((self.a/(math.tan(math.pi*self.T/180)))+self.d)))))+(self.K*(math.tan(math.pi*self.T/180))*self.d*((np.log(self.d))-1)))
        I_pointed = mu*np.power(self.V_simulation-self.V_Initial, 2)*(abs(self.C_Total**3))/((epsilon**2)*((dho*self.a+dho**2)**2))
        self.I_simulation = I_pointed

        print('C Total = ', self.C_Total, ' F')
        print('V Simulation (in kV)= \n', self.V_simulation)
        print('I Simulation (in ÂµA)= \n', self.I_simulation)

    def get_ttestValue(self):
        N = self.V_datas
        D = self.I_simulation-self.I_experiment
        DSquare = np.power(D, 2)
        sum_D = abs(np.sum(D))
        sum_DSquare = np.sum(DSquare)
        
        t = (sum_D/N)/(math.sqrt((sum_DSquare-((sum_D**2)/N))/((N-1)*N)))

        print('t-test Value = ', t)

        self.t = round(t, 4)
        self.textEdit_t.setText(str(self.t))

    def Polinom_Regression(self):
        N = self.V_datas
        sigma_X = np.sum(self.V_experiment)
        sigma_X2 = np.sum(np.power(self.V_experiment, 2))
        sigma_X3 = np.sum(np.power(self.V_experiment, 3))
        sigma_X4 = np.sum(np.power(self.V_experiment, 4))
        sigma_Y = np.sum(self.I_experiment)
        sigma_XY = np.sum((np.array(self.V_experiment))*(np.array(self.I_experiment)))
        sigma_X2Y = np.sum((np.array(np.power(self.V_experiment, 2)))*(np.array(self.I_experiment)))

        Matrix_A = np.array([[N, sigma_X, sigma_X2], 
                             [sigma_X, sigma_X2, sigma_X3], 
                             [sigma_X2, sigma_X3, sigma_X4]])
        Matrix_B = np.array([[sigma_Y], 
                             [sigma_XY], 
                             [sigma_X2Y]])

        det_MatrixA = np.linalg.det(Matrix_A)
        self.A = np.linalg.det(np.hstack((Matrix_B, Matrix_A[0:3,1:3])))/det_MatrixA
        self.B = np.linalg.det(np.hstack((Matrix_A[0:3,0:1], Matrix_B, Matrix_A[0:3,2:3])))/det_MatrixA
        self.C = np.linalg.det(np.hstack((Matrix_A[0:3,0:2], Matrix_B)))/det_MatrixA

        yABC = self.I_experiment-self.A-self.B*self.V_experiment-self.C*np.power(self.V_experiment, 2)
        sigma_yABC = np.sum(np.power(yABC, 2))
        Standard_Dev = math.sqrt(sigma_yABC/(N-2))

        print('Standard Deviation = ', Standard_Dev, 'ÂµA')

        self.Standard_Dev = round(Standard_Dev, 4)
        self.textEdit_SD.setText(str(self.Standard_Dev))

    def plot_Simulation(self):
        self.plot_Experiment()
        
        str_a = str(self.a)
        str_b = str(self.b)
        str_c = str(self.d)
        str_T = str(self.T)
        label_Simulation = 'Simulation with a= '+str_a+'m, b= '+str_b+'m, d= '+str_c+'m and angle= '+str_T
        
        self.axes_Graph = self.axes.plot(self.V_simulation, self.I_simulation, 'b', label=label_Simulation)
        self.axes_Graph = self.axes.errorbar(self.V_simulation, self.I_simulation, yerr=self.Standard_Dev)
        self.axes.legend(loc=0, prop={'size': 8})

    def Error_OpenFile(self):
        Message_Alert = QMessageBox()
        Message_Alert.setIcon(QMessageBox.Warning)
        Message_Alert.setText('Your input file is not valid!\nPlease input file with correct format that is with Row Header Format = (V I a b Tetha and d)')
        Message_Alert.setWindowTitle('Error File Format')
        Message_Alert.setStandardButtons(QMessageBox.Ok)
        Message_Alert.exec_()

    def Error_EmptyK(self):
        Message_Alert = QMessageBox()
        Message_Alert.setIcon(QMessageBox.Warning)
        Message_Alert.setText('Input K is empty!\nPlease, input K Value')
        Message_Alert.setWindowTitle('Error Empty K Input')
        Message_Alert.setStandardButtons(QMessageBox.Ok)
        Message_Alert.exec_()

    def Error_InputK(self):
        Message_Alert = QMessageBox()
        Message_Alert.setIcon(QMessageBox.Warning)
        Message_Alert.setText('Input K is not valid!\nPlease, input K Value using number format (use . to make decimal number)')
        Message_Alert.setWindowTitle('Error Value K Input')
        Message_Alert.setStandardButtons(QMessageBox.Ok)
        Message_Alert.exec_()
        
    def Error_EmptyData(self):
        Message_Alert = QMessageBox()
        Message_Alert.setIcon(QMessageBox.Warning)
        Message_Alert.setText('Input Experiment Data First!')
        Message_Alert.setWindowTitle('Error Empty Data')
        Message_Alert.setStandardButtons(QMessageBox.Ok)
        Message_Alert.exec_()

    def ClearDatas(self):
        #set option
        self.option_Clear()
        if self.Return_Value == QMessageBox.Cancel:
            return

        plt.clf()
        try:
            self.verticalLayout.removeWidget(self.toolbar)
            self.verticalLayout.removeWidget(self.Canvas_Plot)
            sip.delete(self.toolbar)
            sip.delete(self.Canvas_Plot)
            self.toolbar = None
            self.Canvas_Plot = None
        except Exception as e:
            print(e)
            pass

        self.Set_InitialCondition()
        self.textEdit_K.clear()
        self.textEdit_t.clear()
        self.textEdit_SD.clear()
        self.V_simulation = []
        self.I_simulation = []

    def option_Clear(self):
        Message_Alert = QMessageBox()
        Message_Alert.setIcon(QMessageBox.Question)
        Message_Alert.setText('Are you sure to clear worksheet?\nEnsure you save the plot and export to Excel')
        Message_Alert.setWindowTitle('Clear Option')
        Message_Alert.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        self.Return_Value = Message_Alert.exec_()

    def ExportFile(self):
        if self.Datas.size == 0 or self.I_simulation.size == 0:
            print('Error: Can not Export File!\nPlease, Input Experimental and Simulation Data First!') 
            self.Error_EmptyWorkSheet()
            return

        self.File_Data = {'V (kV)': pd.Series(self.V_experiment),
                          'I Experiment (ÂµA)': pd.Series(self.I_experiment),
                          'I Simulation (ÂµA)': pd.Series(self.I_simulation),
                          'a (m)': pd.Series(self.a),
                          'b (m)': pd.Series(self.b),
                          'Tetha (degree)': pd.Series(self.T),
                          'c (m)': pd.Series(self.d),
                          'K': pd.Series(self.K),
                          't': pd.Series(self.t),
                          'SD (ÂµA)': pd.Series(self.Standard_Dev),
                         }

        columns = ['V (kV)', 'I Experiment (ÂµA)', 'I Simulation (ÂµA)', 'a (m)', 'b (m)', 'Tetha (degree)', 'c (m)', 'K', 't', 'SD (ÂµA)']
        self.FileExcel = pd.DataFrame(self.File_Data, columns=columns)
        print(self.FileExcel)

        self.Exportfilename = QFileDialog.getSaveFileName(filter="xlsx(*xlsx);;xls(*xls)")[0]
        self.FileExcel.to_excel(str(self.Exportfilename), index=False)
        print('File successfully saved in:', self.Exportfilename)

    def Error_EmptyWorkSheet(self):
        Message_Alert = QMessageBox()
        Message_Alert.setIcon(QMessageBox.Warning)
        Message_Alert.setText('Can not Export File!\nPlease, Input Experimental and Simulation Data First')
        Message_Alert.setWindowTitle('Error Empty Data')
        Message_Alert.setStandardButtons(QMessageBox.Ok)
        Message_Alert.exec_()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">GRADIENT OF LINE TO PLANE (GLP) CONFIGURATION</span></p><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">NEGATIVE DC CORONA DISCHARGE</span></p></body></html>"))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p align=\"justify\"><span style=\" font-size:6pt; font-weight:600;\">PHYSICS DEPARTMENT</span></p></body></html>"))
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p align=\"justify\"><span style=\" font-size:6pt; font-weight:600;\">FACULTY OF SCIENCE</span></p></body></html>"))
        self.label_5.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:6pt; font-weight:600;\">AND MATHEMATIC</span></p></body></html>"))
        self.label_6.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:6pt; font-weight:600;\">DIPONEGORO UNIVERSITY</span></p></body></html>"))
        self.label_7.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">EXPERIMENTAL INPUT</span></p></body></html>"))
        self.OpenFileButton.setText(_translate("MainWindow", "OPEN FILE"))
        self.label_8.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">SIMULATION INPUT</span></p></body></html>"))
        self.PlotDataButton.setText(_translate("MainWindow", "PLOT DATA"))
        self.label_9.setText(_translate("MainWindow", "<html><head/><body><p align=\"right\"><span style=\" font-size:10pt; font-weight:600;\">K =</span></p></body></html>"))
        self.label_10.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">T-TEST VALUE</span></p></body></html>"))
        self.label_11.setText(_translate("MainWindow", "<html><head/><body><p align=\"right\"><span style=\" font-size:10pt; font-weight:600;\">t =</span></p></body></html>"))
        self.ClearButton.setText(_translate("MainWindow", "CLEAR"))
        self.ExportButton.setText(_translate("MainWindow", "EXPORT"))
        self.label_12.setText(_translate("MainWindow", "<html><head/><body><p align=\"right\"><span style=\" font-size:10pt; font-weight:600;\">SD =</span></p></body></html>"))
        self.label_13.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">STANDARD DEVIATION</span></p></body></html>"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionExport.setText(_translate("MainWindow", "Export"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))

class GraphCanvas(FigureCanvas):
    def __init__(self, parent=None, width=5, height=4, dpi=100):
        self.Fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = self.Fig.add_subplot(111)
        super(GraphCanvas,self).__init__(self.Fig)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
